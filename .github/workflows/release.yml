#on:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
on: push

name: release

jobs:
#  create_release:
#    name: create release
#    runs-on: ubuntu-latest
#    outputs:
#      upload_url: ${{ steps.create_release.outputs.upload_url }}
#    steps:
#      - name: create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false
  build:
    name: build release
    runs-on: ubuntu-latest
    container: amazonlinux:2
#    needs: create_release
    strategy:
      matrix:
        arch:
          - amd64
          #- arm64
        os:
          - linux
        include:
          - arch: amd64
            rpm_arch: x86_64
          #- arch: arm64
          #  rpm_arch: aarch64
    steps:
      - name: get os_release id
        id: os_release_id
        run: |
          cat /etc/os-release
          OS_RELEASE_ID=$(cat /etc/os-release | grep '^ID=')
          if [[ -z $OS_RELEASE_ID ]]; then
            OS_RELEASE_ID=linux
          fi
          echo $OS_RELEASE_ID
          echo "$OS_RELEASE_ID" >> $GITHUB_OUTPUT
      - name: installing require packages
        if: ${{ steps.os_release_id.outputs.OS_RELEASE_ID == 'amzn' }}
        run: yum install -y wget make gcc tar gzip
      - name: get release version
        id: release-version
        run: |
          #echo "$GITHUB_REF_NAME" | sed 's|^[a-zA-Z]\+|RELEASE_VERSION=|' >> $GITHUB_OUTPUT
          echo "v7.0.9" | sed 's|^[a-zA-Z]\+|RELEASE_VERSION=|' >> $GITHUB_OUTPUT
      - name: download archive
        run: |
          wget http://download.redis.io/releases/redis-${{ steps.release-version.outputs.RELEASE_VERSION }}.tar.gz
          tar -zxvf redis-${{ steps.release-version.outputs.RELEASE_VERSION }}.tar.gz
      - name: run make
        run: |
          INSTALL_PREFIX_DIR=$(pwd)/result/usr
          cd redis-${{ steps.release-version.outputs.RELEASE_VERSION }} && make && make PREFIX=$INSTALL_PREFIX_DIR install
          find $INSTALL_PREFIX_DIR

      # create asset {{
      - name: create package deb
        uses: bpicode/github-action-fpm@master
        with:
          fpm_opts: "--debug --name ${{ github.event.repository.name }} --output-type deb --version ${{ steps.release-version.outputs.RELEASE_VERSION }} --architecture ${{ matrix.arch }} --exclude '*/.gitignore' --exclude '*/.git' --input-type dir --chdir ./result --package-name-suffix ${{ steps.os_release_id.outputs.OS_RELEASE_ID }}"
          fpm_args: "./"
      - name: create package rpm
        uses: bpicode/github-action-fpm@master
        with:
          fpm_opts: "--debug --name ${{ github.event.repository.name }} --output-type rpm --version ${{ steps.release-version.outputs.RELEASE_VERSION }} --architecture ${{ matrix.rpm_arch }} --exclude '*/.gitignore' --exclude '*/.git' --input-type dir --chdir ./result --package-name-suffix ${{ steps.os_release_id.outputs.OS_RELEASE_ID }}"
          fpm_args: "./"
      # }}

      - name: debug
        run: |
          ls -al ./

      # upload-release-asset {{
      - name: upload-release-asset tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-${{ steps.release-version.outputs.RELEASE_VERSION }}.tar.gz
          asset_name: ${{ github.event.repository.name }}-${{ steps.release-version.outputs.RELEASE_VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: upload-release-asset deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}_${{ steps.release-version.outputs.RELEASE_VERSION }}_${{ matrix.arch }}.deb
          asset_name: ${{ github.event.repository.name }}_${{ steps.release-version.outputs.RELEASE_VERSION }}_${{ matrix.arch }}.deb
          asset_content_type: application/octet-stream

      - name: upload-release-asset rpm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-${{ steps.release-version.outputs.RELEASE_VERSION }}-1.${{ matrix.rpm_arch }}.rpm
          asset_name: ${{ github.event.repository.name }}-${{ steps.release-version.outputs.RELEASE_VERSION }}-1.${{ matrix.rpm_arch }}.rpm
          asset_content_type: application/octet-stream
      # }}
